@techreport{brosgol2010178c,
  title={DO-178C: A new standard for software safety certification},
  author={Brosgol, Ben and Comar, Cyrille},
  year={2010},
  institution={ADA CORE TECHNOLOGIES NEW YORK NY}
}

@article{leroy2009formally,
  title={A formally verified compiler back-end},
  author={Leroy, Xavier},
  journal={Journal of Automated Reasoning},
  volume={43},
  number={4},
  pages={363--446},
  year={2009},
  publisher={Springer},
  doi = {10.1007/s10817-009-9155-4}
}

@article{shang2017key,
  title={Key translations of the trustworthy compiler {L2C} and its design and implementation},
  author={Shang, S and Gan, YK and Shi, G and Wang, SY and Dong, Y},
  journal={Journal of Software},
  volume={28},
  number={5},
  pages={1233--1246},
  year={2017}
}

@article{kumar2014cakeml,
  title={CakeML: a verified implementation of ML},
  author={Kumar, Ramana and Myreen, Magnus O and Norrish, Michael and Owens, Scott},
  journal={ACM SIGPLAN Notices},
  volume={49},
  number={1},
  pages={179--191},
  year={2014},
  publisher={ACM New York, NY, USA},
  doi = {10.1145/2578855.2535841}
}

@inproceedings{lattner2004llvm,
  title={LLVM: A compilation framework for lifelong program analysis \& transformation},
  author={Lattner, Chris and Adve, Vikram},
  booktitle={International symposium on code generation and optimization, 2004. CGO 2004.},
  pages={75--86},
  year={2004},
  organization={IEEE}
}

@inproceedings{lattner2006introduction,
  title={Introduction to the {LLVM} compiler infrastructure},
  author={Lattner, Chris},
  booktitle={Itanium conference and expo},
  year={2006}
}

@inproceedings{lattner2008llvm,
  title={LLVM and Clang: Next generation compiler technology},
  author={Lattner, Chris},
  booktitle={The BSD conference},
  volume={5},
  pages={1--20},
  year={2008}
}

@inproceedings{balasubramanian2017system,
  title={System programming in rust: Beyond safety},
  author={Balasubramanian, Abhiram and Baranowski, Marek S and Burtsev, Anton and Panda, Aurojit and Rakamari{\'c}, Zvonimir and Ryzhyk, Leonid},
  booktitle={Proceedings of the 16th Workshop on Hot Topics in Operating Systems},
  pages={156--161},
  year={2017},
  doi = {10.1145/3139645.3139660}
}

@inproceedings{zhang2012swift,
  title={Swift: a register-based {JIT} compiler for embedded {JVM}s},
  author={Zhang, Yuan and Yang, Min and Zhou, Bo and Yang, Zhemin and Zhang, Weihua and Zang, Binyu},
  booktitle={Proceedings of the 8th ACM SIGPLAN/SIGOPS conference on Virtual Execution Environments},
  pages={63--74},
  year={2012},
  doi = {10.1145/2365864.2151035}
}

@inproceedings{liu2013intel,
  title={The Intel labs Haskell research compiler},
  author={Liu, Hai and Glew, Neal and Petersen, Leaf and Anderson, Todd A},
  booktitle={Proceedings of the 2013 ACM SIGPLAN symposium on Haskell},
  pages={105--116},
  year={2013}
}

@book{ssabook,
  author         = {L. Beringer, J. Singer and F. Rastello},
  title          = {Static Single Assignment Book},
  publisher      = {Springer Science \& Business Media},
  year           = {2018}
}

@article{kelsey1995correspondence,
  title={A correspondence between continuation passing style and static single assignment form},
  author={Kelsey, Richard A},
  journal={ACM SIGPLAN Notices},
  volume={30},
  number={3},
  pages={13--22},
  year={1995},
  publisher={ACM New York, NY, USA},
  doi = {10.1145/202530.202532}
}

@inproceedings{bolz2009tracing,
  title={Tracing the meta-level: {PyPy}'s tracing {JIT} compiler},
  author={Bolz, Carl Friedrich and Cuni, Antonio and Fijalkowski, Maciej and Rigo, Armin},
  booktitle={Proceedings of the 4th workshop on the Implementation, Compilation, Optimization of Object-Oriented Languages and Programming Systems},
  pages={18--25},
  year={2009}
}

@article{appel1998ssa,
  title={{SSA} is functional programming},
  author={Appel, Andrew W},
  journal={ACM SIGPLAN Notices},
  volume={33},
  number={4},
  pages={17--20},
  year={1998},
  publisher={ACM New York, NY, USA},
  doi = {10.1145/278283.278285}
}

@article{plotkin1977lcf,
  title={{LCF} considered as a programming language},
  author={Plotkin, Gordon D.},
  journal={Theoretical computer science},
  volume={5},
  number={3},
  pages={223--255},
  year={1977},
  publisher={Elsevier}
}

@book{dowek2010introduction,
  title={Introduction to the theory of programming languages},
  author={Dowek, Gilles and L{\'e}vy, Jean-Jacques},
  year={2010},
  publisher={Springer Science \& Business Media}
}

@article{danvy2007one,
  title={On one-pass {CPS} transformations},
  author={Danvy, Olivier and Millikin, Kevin and Nielsen, Lasse R},
  journal={BRICS Report Series},
  volume={14},
  number={6},
  year={2007}
}

@article{plotkin1975call,
  title={Call-by-name, call-by-value and the $\lambda$-calculus},
  author={Plotkin, Gordon D.},
  journal={Theoretical computer science},
  volume={1},
  number={2},
  pages={125--159},
  year={1975},
  publisher={Elsevier},
  doi = {10.1016/0304-3975(75)90017-1}
}

@article{smith2007ocamllex,
  title={Ocamllex and {Ocamlyacc}},
  author={Smith, Joshua B},
  journal={Practical OCaml},
  pages={193--211},
  year={2007},
  publisher={Springer}
}

@book{levine1992lex,
  title={Lex \& yacc},
  author={Levine, John R and Mason, Tony and Brown, Doug},
  year={1992},
  publisher={" O'Reilly Media, Inc."}
}

@phdthesis{leroy2021ocaml,
  title={The OCaml system release 4.13: Documentation and user's manual},
  author={Leroy, Xavier and Doligez, Damien and Frisch, Alain and Garrigue, Jacques and R{\'e}my, Didier and Vouillon, J{\'e}r{\^o}me},
  year={2021},
  school={Inria}
}

@inproceedings{farvardin2020new,
  title={A new backend for {Standard ML of New Jersey}},
  author={Farvardin, Kavon and Reppy, John},
  booktitle={Proceedings of the 32nd Symposium on Implementation and Application of Functional Languages},
  pages={55--66},
  year={2020},
  doi = {10.1145/3462172.3462191}
}

@inproceedings{george1994portable,
  title={A portable and optimizing back end for the SML/NJ compiler},
  author={George, Lal and Guillame, Florent and Reppy, John H},
  booktitle={International Conference on Compiler Construction},
  pages={83--97},
  year={1994},
  organization={Springer}
}

@article{belanger2019certified,
  title={Certified code generation from {CPS to C}},
  author={B{\'e}langer, Olivier Savary and Weaver, Matthew Z and Appel, Andrew W},
  journal={preparation.},
  url={https://www.cs.princeton.edu/\~{}appel/papers/CPStoC.pdf},
  year={2019}
}

@inproceedings{zhao2012formalizing,
  title={Formalizing the {LLVM} intermediate representation for verified program transformations},
  author={Zhao, Jianzhou and Nagarakatte, Santosh and Martin, Milo MK and Zdancewic, Steve},
  booktitle={Proceedings of the 39th annual ACM SIGPLAN-SIGACT symposium on Principles of programming languages},
  pages={427--440},
  year={2012},
  doi = {10.1145/2103621.2103709}
}

@article{zakowski2021modular,
  title={Modular, compositional, and executable formal semantics for {LLVM IR}},
  author={Zakowski, Yannick and Beck, Calvin and Yoon, Irene and Zaichuk, Ilia and Zaliva, Vadim and Zdancewic, Steve},
  journal={Proceedings of the ACM on Programming Languages},
  volume={5},
  number={ICFP},
  pages={1--30},
  year={2021},
  doi = {10.1145/3473572}
}

@inproceedings{kennedy2007compiling,
  title={Compiling with continuations, continued},
  author={Kennedy, Andrew},
  booktitle={Proceedings of the 12th ACM SIGPLAN international conference on Functional programming},
  pages={177--190},
  year={2007},
  doi = {10.1145/1291151.1291179}
}

@phdthesis{dargaye2009verification,
  title={V{\'e}rification formelle d'un compilateur optimisant pour langages fonctionnels},
  author={Dargaye, Zaynah},
  year={2009},
  school={Universit{\'e} Paris-Diderot-Paris VII}
}

@article{zoe-icfp2021,
author = {Paraskevopoulou, Zoe and Li, John M. and Appel, Andrew W.},
title = {Compositional optimizations for {CertiCoq}},
year = {2021},
issue_date = {August 2021},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {5},
number = {ICFP},
journal = {Proc. ACM Program. Lang.},
month = {aug},
articleno = {86},
numpages = {30},
doi = {10.1145/3473591}
}

@InProceedings{wang-esop2016,
author="Wang, Yuting and Nadathur, Gopalan",
editor="Thiemann, Peter",
title="A higher-order abstract syntax approach to verified transformations on functional programs",
booktitle="Programming Languages and Systems",
year="2016",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="752--779",
isbn="978-3-662-49498-1",
doi="10.48550/arXiv.1702.03363"
}

@article{zoe-oopsla2021,
author = {Paraskevopoulou, Zoe and Grover, Anvay},
title = {Compiling with continuations, correctly},
year = {2021},
issue_date = {October 2021},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {5},
number = {OOPSLA},
journal = {Proc. ACM Program. Lang.},
month = {oct},
articleno = {114},
numpages = {29},
doi = {10.1145/3485491}
}

@inproceedings{belanger-cpp2013,
  author    = {Olivier Savary B{\'{e}}langer and
               Stefan Monnier and
               Brigitte Pientka},
  editor    = {Georges Gonthier and
               Michael Norrish},
  title     = {Programming type-Safe transformations using higher-order abstract
               syntax},
  booktitle = {Certified Programs and Proofs - Third International Conference, {CPP}
               2013, Melbourne, {VIC}, Australia, December 11-13, 2013, Proceedings},
  series    = {Lecture Notes in Computer Science},
  volume    = {8307},
  pages     = {243--258},
  publisher = {Springer},
  year      = {2013},
  doi = {10.1007/978-3-319-03545-1_16}
}

@article{compcertssa,
author = {Barthe, Gilles and Demange, Delphine and Pichardie, David},
title = {Formal verification of an {SSA}-based middle-end for {CompCert}},
year = {2014},
issue_date = {March 2014},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {36},
number = {1},
issn = {0164-0925},
journal = {ACM Trans. Program. Lang. Syst.},
month = {mar},
articleno = {4},
numpages = {35},
doi = {10.1145/2579080}
}

@InProceedings{compcertssa-op,
author="Demange, Delphine
and Pichardie, David
and Stefanesco, L{\'e}o",
editor="Franke, Bj{\'o}rn",
title="Verifying fast and sparse {SSA}-based optimizations in {Coq}",
booktitle="Compiler Construction",
year="2015",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="233--252",
isbn="978-3-662-46663-6",
doi="10.1007/978-3-662-46663-6_12"
}

@inproceedings{blazy-cpp2023,
  author    = {Yann Herklotz and
               Delphine Demange and
               Sandrine Blazy},
  editor    = {Robbert Krebbers and
               Dmitriy Traytel and
               Brigitte Pientka and
               Steve Zdancewic},
  title     = {Mechanised Semantics for Gated Static Single Assignment},
  booktitle = {Proceedings of the 12th {ACM} {SIGPLAN} International Conference on
               Certified Programs and Proofs, {CPP} 2023, Boston, {MA}, {USA}, January
               16-17, 2023},
  pages     = {182--196},
  publisher = {{ACM}},
  year      = {2023},
  doi = {10.1145/3573105.3575681}
}

@article{paraskevopoulou2019closure,
  title={Closure conversion is safe for space},
  author={Paraskevopoulou, Zoe and Appel, Andrew W},
  journal={Proceedings of the ACM on Programming Languages},
  volume={3},
  number={ICFP},
  pages={1--29},
  year={2019},
  publisher={ACM New York, NY, USA},
  doi = {10.1145/3341687}
}

@book{church1985calculi,
  title={The calculi of lambda-conversion},
  author={Church, Alonzo},
  number={6},
  year={1985},
  publisher={Princeton University Press}
}

@article{sussman1998scheme,
  title={Scheme: A interpreter for extended lambda calculus},
  author={Sussman, Gerald Jay and Steele Jr, Guy L},
  journal={Higher-Order and Symbolic Computation},
  volume={11},
  number={4},
  pages={405--439},
  year={1998},
  publisher={Springer}
}

@article{hudak1989conception,
  title={Conception, evolution, and application of functional programming languages},
  author={Hudak, Paul},
  journal={ACM Computing Surveys (CSUR)},
  volume={21},
  number={3},
  pages={359--411},
  year={1989},
  publisher={ACM New York, NY, USA}
}

@book{o2008real,
  title={Real world haskell: Code you can believe in},
  author={O'Sullivan, Bryan and Goerzen, John and Stewart, Donald Bruce},
  year={2008},
  publisher={" O'Reilly Media, Inc."}
}

@book{cesarini2009erlang,
  title={Erlang programming: a concurrent approach to software development},
  author={Cesarini, Francesco and Thompson, Simon},
  year={2009},
  publisher={" O'Reilly Media, Inc."}
}

@article{odersky2014unifying,
author = {Odersky, Martin and Rompf, Tiark},
title = {Unifying Functional and Object-Oriented Programming with Scala},
year = {2014},
issue_date = {April 2014},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {57},
number = {4},
issn = {0001-0782},
url = {https://doi.org/10.1145/2591013},
doi = {10.1145/2591013},
abstract = {Scala unifies traditionally disparate programming-language philosophies to develop new components and component systems.},
journal = {Commun. ACM},
month = {apr},
pages = {76–86},
numpages = {11}
}

@book{chlipala2022certified,
  title={Certified programming with dependent types: a pragmatic introduction to the Coq proof assistant},
  author={Chlipala, Adam},
  year={2022},
  publisher={MIT Press}
}

@inproceedings{callanan2007extending,
  title={Extending GCC with modular GIMPLE optimizations},
  author={Callanan, Sean and Dean, Daniel J and Zadok, Erez},
  booktitle={Proceedings of the 2007 GCC Developers’ Summit},
  pages={31--37},
  year={2007},
  organization={Citeseer},
  url = {https://www.researchgate.net/publication/250140710_Extending_GCC_with_modular_GIMPLE_optimizations}
}

@book{thai2003net,
  title={.NET framework essentials},
  author={Thai, Thuan L and Lam, Hoang},
  year={2003},
  isbn = {0596003021},
  publisher={" O'Reilly Media, Inc."}
}

@inproceedings{jiang2019towards,
  title={Towards certified separate compilation for concurrent programs},
  author={Jiang, Hanru and Liang, Hongjin and Xiao, Siyang and Zha, Junpeng and Feng, Xinyu},
  booktitle={Proceedings of the 40th ACM SIGPLAN Conference on Programming Language Design and Implementation},
  pages={111--125},
  year={2019}
}

@phdthesis{dargaye2009verification,
  title={V{\'e}rification formelle d'un compilateur optimisant pour langages fonctionnels},
  author={Dargaye, Zaynah},
  year={2009},
  school={Universit{\'e} Paris-Diderot-Paris VII}
}

@inproceedings{csmith2011,
author = {Yang, Xuejun and Chen, Yang and Eide, Eric and Regehr, John},
title = {Finding and Understanding Bugs in C Compilers},
year = {2011},
isbn = {9781450306638},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1993498.1993532},
doi = {10.1145/1993498.1993532},
booktitle = {Proceedings of the 32nd ACM SIGPLAN Conference on Programming Language Design and Implementation},
pages = {283–294},
location = {San Jose, California, USA}
}

@inproceedings{cakeml2016,
author = {Tan, Yong Kiam and Myreen, Magnus O. and Kumar, Ramana and Fox, Anthony and Owens, Scott and Norrish, Michael},
title = {A New Verified Compiler Backend for CakeML},
year = {2016},
isbn = {9781450342193},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2951913.2951924},
doi = {10.1145/2951913.2951924},
abstract = {We have developed and mechanically verified a new compiler backend for CakeML. Our new compiler features a sequence of intermediate languages that allows it to incrementally compile away high-level features and enables verification at the right levels of semantic detail. In this way, it resembles mainstream (unverified) compilers for strict functional languages. The compiler supports efficient curried multi-argument functions, configurable data representations, exceptions that unwind the call stack, register allocation, and more. The compiler targets several architectures: x86-64, ARMv6, ARMv8, MIPS-64, and RISC-V.  In this paper, we present the overall structure of the compiler, including its 12 intermediate languages, and explain how everything fits together. We focus particularly on the interaction between the verification of the register allocator and the garbage collector, and memory representations. The entire development has been carried out within the HOL4 theorem prover.},
booktitle = {Proceedings of the 21st ACM SIGPLAN International Conference on Functional Programming},
pages = {60–73},
numpages = {14},
keywords = {verified optimisations, ML, Compiler verification},
location = {Nara, Japan},
series = {ICFP 2016}
}

@article{li2018verifying,
  title={Verifying the uncurry phase of the CertiCoq compiler},
  author={Li, John},
  journal={Independent Work Report},
  year={2018}
}

@article{wang2019certifying,
author = {Wang, Shengyi and Cao, Qinxiang and Mohan, Anshuman and Hobor, Aquinas},
title = {Certifying Graph-Manipulating C Programs via Localizations within Data Structures},
year = {2019},
issue_date = {October 2019},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {3},
number = {OOPSLA},
url = {https://doi.org/10.1145/3360597},
doi = {10.1145/3360597},
journal = {Proc. ACM Program. Lang.},
month = {oct},
articleno = {171},
numpages = {30},
keywords = {CompCert, VST, Separation logic, Coq, Graph-manipulating programs}
}

@book{pierce2002types,
  title={Types and programming languages},
  author={Pierce, Benjamin C},
  year={2002},
  publisher={MIT press}
}

@book{steele1978rabbit,
  title={Rabbit: A compiler for Scheme},
  author={Steele Jr, Guy L},
  year={1978},
  publisher={Massachusetts Institute of Technology}
}

@article{shao1995type,
  title={A type-based compiler for Standard ML},
  author={Shao, Zhong and Appel, Andrew W},
  journal={ACM SIGPLAN Notices},
  volume={30},
  number={6},
  pages={116--129},
  year={1995},
  publisher={ACM New York, NY, USA}
}

@incollection{paulin2011introduction,
  title={Introduction to the Coq proof-assistant for practical software verification},
  author={Paulin-Mohring, Christine},
  booktitle={LASER Summer School on Software Engineering},
  pages={45--95},
  year={2011},
  publisher={Springer}
}

@article{pierce2010software,
  title={Software foundations},
  author={Pierce, Benjamin C and Casinghino, Chris and Gaboardi, Marco and Greenberg, Michael and Hri{\c{t}}cu, C{\u{a}}t{\u{a}}lin and Sj{\"o}berg, Vilhelm and Yorgey, Brent},
  journal={Webpage: http://www. cis. upenn. edu/bcpierce/sf/current/index. html},
  year={2010}
}

@inproceedings{chu2006map,
author = {Chu, Cheng-Tao and Kim, Sang Kyun and Lin, Yi-An and Yu, YuanYuan and Bradski, Gary and Ng, Andrew Y. and Olukotun, Kunle},
title = {Map-Reduce for Machine Learning on Multicore},
year = {2006},
publisher = {MIT Press},
address = {Cambridge, MA, USA},
abstract = {We are at the beginning of the multicore era. Computers will have increasingly many cores (processors), but there is still no good programming framework for these architectures, and thus no simple and unified way for machine learning to take advantage of the potential speed up. In this paper, we develop a broadly applicable parallel programming method, one that is easily applied to many different learning algorithms. Our work is in distinct contrast to the tradition in machine learning of designing (often ingenious) ways to speed up a single algorithm at a time. Specifically, we show that algorithms that fit the Statistical Query model [15] can be written in a certain "summation form," which allows them to be easily parallelized on multicore computers. We adapt Google's map-reduce [7] paradigm to demonstrate this parallel speed up technique on a variety of learning algorithms including locally weighted linear regression (LWLR), k-means, logistic regression (LR), naive Bayes (NB), SVM, ICA, PCA, gaussian discriminant analysis (GDA), EM, and backpropagation (NN). Our experimental results show basically linear speedup with an increasing number of processors.},
booktitle = {Proceedings of the 19th International Conference on Neural Information Processing Systems},
pages = {281–288},
numpages = {8},
location = {Canada},
series = {NIPS'06}
}

@article{itree2019,
author = {Xia, Li-yao and Zakowski, Yannick and He, Paul and Hur, Chung-Kil and Malecha, Gregory and Pierce, Benjamin C. and Zdancewic, Steve},
title = {Interaction Trees: Representing Recursive and Impure Programs in Coq},
year = {2019},
issue_date = {January 2020},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {4},
number = {POPL},
url = {https://doi.org/10.1145/3371119},
doi = {10.1145/3371119},
abstract = {Interaction trees (ITrees) are a general-purpose data structure for representing the behaviors of recursive programs that interact with their environments. A coinductive variant of “free monads,” ITrees are built out of uninterpreted events and their continuations. They support compositional construction of interpreters from event handlers, which give meaning to events by defining their semantics as monadic actions. ITrees are expressive enough to represent impure and potentially nonterminating, mutually recursive computations, while admitting a rich equational theory of equivalence up to weak bisimulation. In contrast to other approaches such as relationally specified operational semantics, ITrees are executable via code extraction, making them suitable for debugging, testing, and implementing software artifacts that are amenable to formal verification. We have implemented ITrees and their associated theory as a Coq library, mechanizing classic domain- and category-theoretic results about program semantics, iteration, monadic structures, and equational reasoning. Although the internals of the library rely heavily on coinductive proofs, the interface hides these details so that clients can use and reason about ITrees without explicit use of Coq’s coinduction tactics. To showcase the utility of our theory, we prove the termination-sensitive correctness of a compiler from a simple imperative source language to an assembly-like target whose meanings are given in an ITree-based denotational semantics. Unlike previous results using operational techniques, our bisimulation proof follows straightforwardly by structural induction and elementary rewriting via an equational theory of combinators for control-flow graphs.},
journal = {Proc. ACM Program. Lang.},
month = {dec},
articleno = {51},
numpages = {32},
keywords = {monads, compiler correctness, Coq, coinduction}
}

@article{vellvm2012,
author = {Zhao, Jianzhou and Nagarakatte, Santosh and Martin, Milo M.K. and Zdancewic, Steve},
title = {Formalizing the LLVM Intermediate Representation for Verified Program Transformations},
year = {2012},
issue_date = {January 2012},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {47},
number = {1},
issn = {0362-1340},
url = {https://doi.org/10.1145/2103621.2103709},
doi = {10.1145/2103621.2103709},
abstract = {This paper presents Vellvm (verified LLVM), a framework for reasoning about programs expressed in LLVM's intermediate representation and transformations that operate on it. Vellvm provides a mechanized formal semantics of LLVM's intermediate representation, its type system, and properties of its SSA form. The framework is built using the Coq interactive theorem prover. It includes multiple operational semantics and proves relations among them to facilitate different reasoning styles and proof techniques.To validate Vellvm's design, we extract an interpreter from the Coq formal semantics that can execute programs from LLVM test suite and thus be compared against LLVM reference implementations. To demonstrate Vellvm's practicality, we formalize and verify a previously proposed transformation that hardens C programs against spatial memory safety violations. Vellvm's tools allow us to extract a new, verified implementation of the transformation pass that plugs into the real LLVM infrastructure; its performance is competitive with the non-verified, ad-hoc original.},
journal = {SIGPLAN Not.},
month = {jan},
pages = {427–440},
numpages = {14},
keywords = {Coq, LLVM, memory safety}
}

@article{itreevellvm2021,
author = {Zakowski, Yannick and Beck, Calvin and Yoon, Irene and Zaichuk, Ilia and Zaliva, Vadim and Zdancewic, Steve},
title = {Modular, Compositional, and Executable Formal Semantics for LLVM IR},
year = {2021},
issue_date = {August 2021},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {5},
number = {ICFP},
url = {https://doi.org/10.1145/3473572},
doi = {10.1145/3473572},
abstract = {This paper presents a novel formal semantics, mechanized in Coq, for a large, sequential subset of the LLVM IR. In contrast to previous approaches, which use relationally-specified operational semantics, this new semantics is based on monadic interpretation of interaction trees, a structure that provides a more compositional approach to defining language semantics while retaining the ability to extract an executable interpreter. Our semantics handles many of the LLVM IR's non-trivial language features and is constructed modularly in terms of event handlers, including those that deal with nondeterminism in the specification. We show how this semantics admits compositional reasoning principles derived from the interaction trees equational theory of weak bisimulation, which we extend here to better deal with nondeterminism, and we use them to prove that the extracted reference interpreter faithfully refines the semantic model. We validate the correctness of the semantics by evaluating it on unit tests and LLVM IR programs generated by HELIX.},
journal = {Proc. ACM Program. Lang.},
month = {aug},
articleno = {67},
numpages = {30},
keywords = {Coq, LLVM, Monads, Semantics, Verified Compilation}
}

@article{ABRAMSKY2000409,
title = {Full Abstraction for PCF},
journal = {Information and Computation},
volume = {163},
number = {2},
pages = {409-470},
year = {2000},
issn = {0890-5401},
doi = {https://doi.org/10.1006/inco.2000.2930},
url = {https://www.sciencedirect.com/science/article/pii/S0890540100929304},
author = {Samson Abramsky and Radha Jagadeesan and Pasquale Malacaria},
}

@article{MILNER19771,
title = {Fully abstract models of typed λ-calculi},
journal = {Theoretical Computer Science},
volume = {4},
number = {1},
pages = {1-22},
year = {1977},
issn = {0304-3975},
doi = {https://doi.org/10.1016/0304-3975(77)90053-6},
url = {https://www.sciencedirect.com/science/article/pii/0304397577900536},
author = {Robin Milner},
}

@inproceedings{saint2006shard,
  title={SHard: a Scheme to hardware compiler},
  author={Saint-Mleux, Xavier and Feeley, Marc and David, Jean-Pierre},
  booktitle={Workshop on Scheme and Functional Programming},
  year={2006}
}

@article{woodruff2018optimising,
  title={An Optimising Compiler for ML},
  author={Woodruff, Jackson Cunningham},
  year={2018}
}

@article{taro2021cpstrans,
author = {Sekiyama, Taro and Tsukada, Takeshi},
title = {CPS transformation with affine types for call-by-value implicit polymorphism},
year = {2021},
issue_date = {August 2021},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {5},
number = {ICFP},
url = {https://doi.org/10.1145/3473600},
doi = {10.1145/3473600},
journal = {Proc. ACM Program. Lang.},
month = {aug},
articleno = {95},
numpages = {30}
}
